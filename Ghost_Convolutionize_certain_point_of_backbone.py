# -*- coding: utf-8 -*-
"""Generate_model_including_Ghost_convolution.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aC4miZwqk3or9ONlQm8LIA2iZx2nb9fL

#1. 기본 환경 구성
"""

from google.colab import drive

# Google Drive Mount
drive.mount('/content/drive')

!pip install ultralytics

from ultralytics import YOLO
import torch
import torch.nn as nn

"""#2. Original Model - 기존 yolov8n 모델 + Transfer Learning




"""

original_model = YOLO('/content/drive/MyDrive/dataset_park_3/dataset_4/lastest.pt')

original_metrics = original_model.val(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml', conf=0.4, verbose=False)

print(original_metrics)

"""# 3. Modified Model - 기존 Convolution Layers 중 일부를 Ghost Convolution Layer로 수정

# 3.1 기존 Convolution Layer Vs. Ghost Convolution Layer
# 3.1.1 기존 Convolution Layer
- 출력 채널 생성 방식: 모든 출력 채널을 독립적으로 학습
- 연산량(FLOPs): (입력 특징 맵의 높이)*(입력 특징 맵의 너비) * 커널 크기(k) * 커널 크기(k) * 입력 채널 수 * 출력 채널 수
- 파라미터 수: 출력 채널 수에 비례하여 증가
- 효율성: 높은 연산량과 큰 모델 크기
- 정보 표현력: 높은 표현력을 제공하며 복잡한 특징 학습에 적합
- 적합한 상황: 복잡한 데이터셋(COCO, ImageNet)

#3.1.2 Ghost Convolution Layer
- 출력 채널 생성 방식: 주요 feature을 학습한 뒤, Ghost feature을 추가적으로 생성
- 연산량(FLOPs): Ghost feature 생성으로 기존 연산량보다 감소
- 파라미터 수: Ghost feature 생성으로 파라미터 수 감소
- 효율성: 연산량과 파라미터 수를 줄여 경량화된 모델 구현 가능
- 정보 표현력: Ghost feature 생성 시 일부 정보 손실 가능성 有
- 적합한 상황: 경량화가 필요한 상황(모바일 디바이스, 실시간 추론)

#3.1.3 Ghost feature란 무엇인가?
- 주요 feature
$$Y_{primary}=W_{primary}X+b$$
- Ghost feature: 간단한 변환만 수행해서 연산량이 줄어듦
$$Y_{ghost}=T(Y_{primary})$$
- 최종 출력
$$Y=[Y_{primary}, Y_{ghost}]$$

#3.2 실험 구성
#3.2.1 Yolov8n의 기본 Backbone 구조
Conv[0] → Conv[1] → C2f[0] → Conv[2] → C2f[1] → Conv[3] → C2f[2] → Conv[4] → C2f[3] → SPPF

위 구조에서 언급된 Convolution Layers 중 일부를 Ghost Convolution Layer로 바꾸며 실험을 진행할 것이다. 다음 코드는
"""

def autopad(k, p=None):
    """
    Kernel size에 따라 padding 값을 자동으로 계산.
    :param k: Kernel size
    :param p: 지정된 padding 값 (기본값: None)
    :return: 계산된 padding 값
    """
    if p is None:  # 'same' padding
        p = k // 2
    return p

# Ghost Convolution 클래스 정의
class GhostConv(nn.Module):
    def __init__(self, c1, c2, k=1, s=1, p=None, ratio=2, act=True):              # 기본 ratio = 2로 설정
        super().__init__()
        self.ratio = ratio
        c_ghost = max(1, int(c2 // ratio))  # c_ghost가 1 이상이 되도록 보장
        self.primary_conv = nn.Sequential(
            nn.Conv2d(c1, c_ghost, k, s, autopad(k, p), bias=False),
            nn.BatchNorm2d(c_ghost),
            nn.SiLU(inplace=True) if act else nn.Identity()
        )
        self.ghost_conv = nn.Sequential(
            nn.Conv2d(c_ghost, c2 - c_ghost, kernel_size=1, stride=1, bias=False),
            nn.BatchNorm2d(c2 - c_ghost),
            nn.SiLU(inplace=True) if act else nn.Identity()
        )

    def forward(self, x):
        primary_features = self.primary_conv(x)
        ghost_features = self.ghost_conv(primary_features)
        return torch.cat([primary_features, ghost_features], dim=1)

def replace_selected_convolution(model, i):
    """
    YOLOv8 모델에서 특정 Layer를 Ghost Convolution으로 교체
    :param model: YOLOv8 모델 객체
    :param i: 교체할 Layer의 index
    """
    # 대상 Layer 가져오기
    target_layer = model.model.model[i]

    # Conv2d인지 확인
    if isinstance(target_layer.conv, nn.Conv2d):
        in_channels = target_layer.conv.in_channels
        out_channels = target_layer.conv.out_channels
        kernel_size = target_layer.conv.kernel_size[0]
        stride = target_layer.conv.stride[0]
        padding = target_layer.conv.padding[0]

        # GhostConv로 교체
        model.model.model[i] = GhostConv(c1=in_channels, c2=out_channels, k=kernel_size, s=stride, p=padding)

"""# 3.3 실험 1 - Conv[0]만 변경"""

modified_conv_0_model_ratio_2 = YOLO('yolov8n.pt')

# Convolution layer indexes in the backbone: 0, 1, 3, 5, 7
replace_selected_convolution(modified_conv_0_model_ratio_2, 0)
#replace_selected_convolution(model, 1)
#replace_selected_convolution(model, 3)
#replace_selected_convolution(model, 5)
#replace_selected_convolution(model, 7)

modified_conv_0_model_ratio_2.train(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml', epochs=10, imgsz=640)

modified_conv_0_model_ratio_2_metrics = modified_conv_0_model_ratio_2.val(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml')

modified_conv_0_model_ratio_2.save('/content/drive/MyDrive/dataset_park_3/modified_model/modified_conv_0_model_ratio_2.pt')

print(modified_conv_0_model_ratio_2_metrics)

"""#3.4 실험 2 - Conv[1]만 변경"""

modified_conv_1_model_ratio_2 = YOLO('yolov8n.pt')

# Convolution layer indexes in the backbone: 0, 1, 3, 5, 7
#replace_selected_convolution(model, 0)
replace_selected_convolution(modified_conv_1_model_ratio_2, 1)
#replace_selected_convolution(model, 3)
#replace_selected_convolution(model, 5)
#replace_selected_convolution(model, 7)

modified_conv_1_model_ratio_2.train(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml', epochs=10, imgsz=640)

modified_conv_1_model_ratio_2_metrics = modified_conv_1_model_ratio_2.val(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml')

modified_conv_1_model_ratio_2.save('/content/drive/MyDrive/dataset_park_3/modified_model/modified_conv_1_model_ratio_2.pt')

print(modified_conv_1_model_ratio_2_metrics)

"""#3.5 실험 3 - Conv[2]만 변경"""

modified_conv_2_model_ratio_2 = YOLO('yolov8n.pt')

# Convolution layer indexes in the backbone: 0, 1, 3, 5, 7
#replace_selected_convolution(model, 0)
#replace_selected_convolution(model, 1)
replace_selected_convolution(modified_conv_2_model_ratio_2, 3)
#replace_selected_convolution(model, 5)
#replace_selected_convolution(model, 7)

modified_conv_2_model_ratio_2.train(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml', epochs=10, imgsz=640)

modified_conv_2_model_ratio_2_metrics = modified_conv_2_model_ratio_2.val(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml')

modified_conv_2_model_ratio_2.save('/content/drive/MyDrive/dataset_park_3/modified_model/modified_conv_2_model_ratio_2.pt')

print(modified_conv_2_model_ratio_2_metrics)

"""#3.6 실험 4 - Conv[3]만 변경"""

modified_conv_3_model_ratio_2 = YOLO('yolov8n.pt')

# Convolution layer indexes in the backbone: 0, 1, 3, 5, 7
#replace_selected_convolution(model, 0)
#replace_selected_convolution(model, 1)
#replace_selected_convolution(model, 3)
replace_selected_convolution(modified_conv_3_model_ratio_2, 5)
#replace_selected_convolution(model, 7)

modified_conv_3_model_ratio_2.train(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml', epochs=10, imgsz=640)

modified_conv_3_model_ratio_2_metrics = modified_conv_3_model_ratio_2.val(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml')

modified_conv_3_model_ratio_2.save('/content/drive/MyDrive/dataset_park_3/modified_model/modified_conv_3_model_ratio_2.pt')

print(modified_conv_3_model_ratio_2_metrics)

"""#3.7 실험 5 - Conv[4]만 변경"""

modified_conv_4_model_ratio_2 = YOLO('yolov8n.pt')

# Convolution layer indexes in the backbone: 0, 1, 3, 5, 7
#replace_selected_convolution(model, 0)
#replace_selected_convolution(model, 1)
#replace_selected_convolution(model, 3)
#replace_selected_convolution(model, 5)
replace_selected_convolution(modified_conv_4_model_ratio_2, 7)

modified_conv_4_model_ratio_2.train(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml', epochs=10, imgsz=640)

modified_conv_4_model_ratio_2_metrics = modified_conv_4_model_ratio_2.val(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml')

modified_conv_4_model_ratio_2.save('/content/drive/MyDrive/dataset_park_3/modified_model/modified_conv_4_model_ratio_2.pt')

print(modified_conv_4_model_ratio_2_metrics)

"""#3.8 실험 6 - Conv[0] 변경, ratio=4"""

modified_conv_0_model_ratio_4 = YOLO('yolov8n.pt')

# Convolution layer indexes in the backbone: 0, 1, 3, 5, 7
replace_selected_convolution(modified_conv_0_model_ratio_4, 0)
#replace_selected_convolution(model, 1)
#replace_selected_convolution(model, 3)
#replace_selected_convolution(model, 5)
#replace_selected_convolution(modified_conv_4_model_ratio_2, 7)

modified_conv_0_model_ratio_4.train(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml', epochs=10, imgsz=640)

modified_conv_0_model_ratio_4_metrics = modified_conv_0_model_ratio_4.val(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml')

modified_conv_0_model_ratio_4.save('/content/drive/MyDrive/dataset_park_3/modified_model/modified_conv_0_model_ratio_4.pt')

print(modified_conv_0_model_ratio_4_metrics)

"""#3.9 original_model + advance"""

lastest_applied_model = YOLO('/content/drive/MyDrive/dataset_park_3/modified_model/lastest_applied.pt')

lastest_applied_model_metrics = lastest_applied_model.val(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml')

print(lastest_applied_model_metrics)

"""#3.10 YOLOv8n + Advance의 Conv[0] -> Ghost Conv[0]"""

modified_conv_0_model_ratio_2_advance = YOLO('/content/drive/MyDrive/dataset_park_3/modified_model/yolo_v8n_applied.pt')

# Convolution layer indexes in the backbone: 0, 1, 3, 5, 7
replace_selected_convolution(modified_conv_0_model_ratio_2_advance, 0)
#replace_selected_convolution(model, 1)
#replace_selected_convolution(model, 3)
#replace_selected_convolution(model, 5)
#replace_selected_convolution(modified_conv_4_model_ratio_2, 7)

modified_conv_0_model_ratio_2_advance.train(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml', epochs=10, imgsz=640)

modified_conv_0_model_ratio_2_advance_metrics = modified_conv_0_model_ratio_2_advance.val(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml')

modified_conv_0_model_ratio_2_advance.save('/content/drive/MyDrive/dataset_park_3/modified_model/modified_conv_0_model_ratio_2_advance.pt')

print(modified_conv_0_model_ratio_2_advance_metrics)

"""#3.11 Ghost Convolutionized Model[0] -> PostAdvance"""

modified_conv_0_model_ratio_2_post_advance = YOLO('/content/drive/MyDrive/dataset_park_3/modified_model/modified_conv_0_model_ratio_2_post_advance.pt')

modified_conv_0_model_ratio_2_post_advance_metrics = modified_conv_0_model_ratio_2_post_advance.val(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml')

print(modified_conv_0_model_ratio_2_post_advance_metrics)

"""#3.12 Generate Ghost-convolutionized YOLOv8n model(not yet transfer learning) for mid-advance"""

modified_conv_0_model_for_mid_advance = YOLO('yolov8n.pt')

# Convolution layer indexes in the backbone: 0, 1, 3, 5, 7
replace_selected_convolution(modified_conv_0_model_for_mid_advance, 0)
#replace_selected_convolution(model, 1)
#replace_selected_convolution(model, 3)
#replace_selected_convolution(model, 5)
#replace_selected_convolution(modified_conv_4_model_ratio_2, 7)

modified_conv_0_model_for_mid_advance.save('/content/drive/MyDrive/dataset_park_3/modified_model/modified_conv_0_model_for_mid_advance.pt')

"""#3.13 Final Check for Metrics of Only Ghost-Convolutionized Model and Risk-Compensation Executed Model"""

test1 = YOLO('/content/drive/MyDrive/dataset_park_3/modified_model/modified_conv_0_model_ratio_2.pt')

test2 = YOLO('apply_risk_compensation.pt')

test1_metrics = test1.val(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml', conf=0.4, verbose=False)

test2_metrics = test2.val(data='/content/drive/MyDrive/dataset_park_3/dataset_4/data.yaml', conf=0.4, verbose=False)

print(test1_metrics)

print(test2_metrics)